generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://u9xwrmcwgc5dc3aj:jH01D8pziKTOxkK8iCwG@bjdg4tqyixmy9az3s9s8-mysql.services.clever-cloud.com:3306/bjdg4tqyixmy9az3s9s8"
}

model user {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique()
  email         String?   @unique()
  password      String?
  role          user_role @default(USER)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      account?
  authenticator authenticator[]
  orders        orders[]
  transaction   transaction[]
  session       session[]
  reviews       reviews[]
}

model account {
  id                       String   @id @default(cuid())
  userId                   String   @unique()
  type                     String
  provider                 String   @db.VarChar(100)
  providerAccountId        String   @db.VarChar(100)
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model authenticator {
  credentialID         String  @unique() @db.VarChar(100)
  userId               String  @db.VarChar(100)
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model verificationtoken {
  identifier String   @db.VarChar(100)
  token      String   @db.VarChar(100)
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model coupon {
  id            Int        @id @default(autoincrement())
  code          String     @unique
  expDate       DateTime
  type          CouponType @default(fixed)
  value         Decimal    @db.Decimal(10, 2)
  active        Boolean    @default(true)
  minOrderValue Decimal?   @db.Decimal(10, 2)
}

model orders {
  id        Int         @id @unique @default(autoincrement())
  subTotal  Decimal     @db.Decimal(10, 2)
  discount  Decimal?    @db.Decimal(10, 2)
  shipCost  Decimal?    @db.Decimal(10, 2)
  total     Decimal     @db.Decimal(10, 2)
  status    OrderStatus @default(Pending)
  name      String
  email     String
  phone     String
  country   String
  city      String
  province  String
  address_1 String
  address_2 String?
  zipCode   String
  userId    String

  deliveredDate DateTime?
  canceledDate  DateTime?
  confirmedDate DateTime?
  shippedDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         user          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction  transaction?
  orderitems   orderitems[]
  diffshipping diffshipping?

  @@index([userId])
}

model orderitems {
  id        Int      @id @unique(map: "orderItems_id_key") @default(autoincrement())
  orderId   Int
  productId Int
  variantId Int?
  qty       Int      @default(0)
  price     Decimal  @default(0) @db.Decimal(10, 2)
  image     String?
  specs     Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   orders    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant variants? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([orderId, productId, variantId])
}

model diffshipping {
  id        Int      @id @unique(map: "diffShipping_id_key") @default(autoincrement())
  name      String
  email     String
  phone     String
  country   String
  city      String
  province  String
  address_1 String
  address_2 String?
  zipCode   String
  orderId   Int      @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order orders @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model transaction {
  id        Int         @id @unique @default(autoincrement())
  mode      transMod    @default(pending)
  status    transStatus @default(cod)
  userId    String
  orderId   Int         @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user  user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order orders @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([userId, orderId])
}

model brand {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique()
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pagesId   Int?
  page      pages?    @relation(fields: [pagesId], references: [id])
  products  product[]
}

model category {
  id        Int        @id @default(autoincrement())
  name      String
  slug      String     @unique()
  image     String?
  parentId  Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  parent    category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcats   category[] @relation("CategoryHierarchy")
  page      pages?     @relation(fields: [pagesId], references: [id])
  pagesId   Int?
  products  product[]

  @@index([parentId])
}

enum collectionType {
  manual
  smart
}

model collections {
  id         Int            @id @default(autoincrement())
  name       String
  slug       String         @unique()
  type       collectionType @default(manual)
  conditions Json?
  pagesId    Int?
  page       pages?         @relation(fields: [pagesId], references: [id])

  products  product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([pagesId])
}

model pages {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  type      String
  published Boolean
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collections collections[]
  category    category[]
  brand       brand[]

  @@index([slug])
}

model reviews {
  id        Int      @id @default(autoincrement())
  rate      String
  review    String
  userId    String
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   product? @relation(fields: [productId], references: [id])

  @@index([userId, productId])
}

model messages {
  id      Int    @id @default(autoincrement())
  name    String
  email   String
  comment String @db.LongText()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id        Int        @id @default(autoincrement())
  title     String
  slug      String     @unique
  menuItems MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MenuItem {
  id       Int    @id @default(autoincrement())
  title    String
  url      String
  order    Int?
  parentId Int?
  menuId   Int

  menu Menu? @relation(fields: [menuId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId, menuId])
}

// 
model product {
  id           Int     @id @default(autoincrement())
  name         String
  slug         String  @unique
  SKU          String  @unique()
  price        Decimal @db.Decimal(10, 2)
  quantity     Int
  images       String? @db.Text()
  features     String  @db.Text()
  description  String  @db.Text()
  shortDesc    String  @db.Text()
  variantType  String?
  brandId      Int?
  categoryId   Int?
  collectionId Int?
  noReview     Int?
  avgRate      Float?

  reviews     reviews[]
  orderitems  orderitems[]
  collections collections[]
  category    category?     @relation(fields: [categoryId], references: [id])
  brand       brand?        @relation(fields: [brandId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  variants  variants[]

  @@index([categoryId, brandId])
}

model variants {
  id         Int          @id @default(autoincrement())
  SKU        String
  quantity   Int
  price      Decimal      @db.Decimal(10, 2)
  images     String?      @db.Text()
  color      String?
  size       String?
  material   String?
  style      String?
  weight     String?
  productId  Int
  product    product?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems orderitems[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([SKU])
  @@index([productId])
}

// 

enum CouponType {
  percent
  fixed
}

enum OrderStatus {
  Pending
  ordered
  confirmed
  shipped
  delivered
  canceld
}

enum transStatus {
  cod
  card
  paypal
}

enum transMod {
  pending
  approved
  decline
  refused
}

enum user_role {
  USER
  ADMIN
}
